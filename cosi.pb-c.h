/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosi.proto */

#ifndef PROTOBUF_C_cosi_2eproto__INCLUDED
#define PROTOBUF_C_cosi_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Announcement Announcement;
typedef struct _Challenge Challenge;
typedef struct _Commitment Commitment;
typedef struct _OverlayMessage OverlayMessage;
typedef struct _ProtocolPacket ProtocolPacket;
typedef struct _RequestRoster RequestRoster;
typedef struct _RequestTree RequestTree;
typedef struct _Response Response;
typedef struct _Roster Roster;
typedef struct _ServerIdentity ServerIdentity;
typedef struct _Token Token;
typedef struct _TreeMarshal TreeMarshal;
typedef struct _TreeNodeInfo TreeNodeInfo;


/* --- enums --- */


/* --- messages --- */

struct  _Announcement
{
  ProtobufCMessage base;
};
#define ANNOUNCEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&announcement__descriptor) \
     }


struct  _Challenge
{
  ProtobufCMessage base;
  ProtobufCBinaryData chall;
};
#define CHALLENGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&challenge__descriptor) \
    , {0,NULL} }


struct  _Commitment
{
  ProtobufCMessage base;
  ProtobufCBinaryData comm;
};
#define COMMITMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&commitment__descriptor) \
    , {0,NULL} }


struct  _OverlayMessage
{
  ProtobufCMessage base;
  TreeNodeInfo *tree_node_info;
  RequestTree *request_tree;
  TreeMarshal *tree_marshal;
  RequestRoster *request_roster;
  Roster *roster;
};
#define OVERLAY_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&overlay_message__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _ProtocolPacket
{
  ProtobufCMessage base;
  uint32_t phase;
  OverlayMessage *info;
  Announcement *ann;
  Commitment *comm;
  Challenge *chal;
  Response *resp;
};
#define PROTOCOL_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol_packet__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL }


struct  _RequestRoster
{
  ProtobufCMessage base;
  ProtobufCBinaryData roster_id;
};
#define REQUEST_ROSTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request_roster__descriptor) \
    , {0,NULL} }


struct  _RequestTree
{
  ProtobufCMessage base;
  ProtobufCBinaryData tree_id;
};
#define REQUEST_TREE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request_tree__descriptor) \
    , {0,NULL} }


struct  _Response
{
  ProtobufCMessage base;
  ProtobufCBinaryData resp;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , {0,NULL} }


struct  _Roster
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  size_t n_list;
  ServerIdentity **list;
  ProtobufCBinaryData aggregate;
};
#define ROSTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roster__descriptor) \
    , {0,NULL}, 0,NULL, {0,NULL} }


struct  _ServerIdentity
{
  ProtobufCMessage base;
  ProtobufCBinaryData public_;
  ProtobufCBinaryData id;
  char *address;
};
#define SERVER_IDENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_identity__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  _Token
{
  ProtobufCMessage base;
  ProtobufCBinaryData roster_id;
  ProtobufCBinaryData tree_id;
  ProtobufCBinaryData proto_id;
  ProtobufCBinaryData service_id;
  ProtobufCBinaryData round_id;
  ProtobufCBinaryData tree_node_id;
  ProtobufCBinaryData cacheid;
};
#define TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&token__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


struct  _TreeMarshal
{
  ProtobufCMessage base;
  ProtobufCBinaryData tree_node_id;
  ProtobufCBinaryData tree_id;
  ProtobufCBinaryData server_identity_id;
  ProtobufCBinaryData roster_id;
  size_t n_children;
  TreeMarshal **children;
};
#define TREE_MARSHAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tree_marshal__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0,NULL }


struct  _TreeNodeInfo
{
  ProtobufCMessage base;
  Token *to;
  Token *from;
};
#define TREE_NODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tree_node_info__descriptor) \
    , NULL, NULL }


/* Announcement methods */
void   announcement__init
                     (Announcement         *message);
size_t announcement__get_packed_size
                     (const Announcement   *message);
size_t announcement__pack
                     (const Announcement   *message,
                      uint8_t             *out);
size_t announcement__pack_to_buffer
                     (const Announcement   *message,
                      ProtobufCBuffer     *buffer);
Announcement *
       announcement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   announcement__free_unpacked
                     (Announcement *message,
                      ProtobufCAllocator *allocator);
/* Challenge methods */
void   challenge__init
                     (Challenge         *message);
size_t challenge__get_packed_size
                     (const Challenge   *message);
size_t challenge__pack
                     (const Challenge   *message,
                      uint8_t             *out);
size_t challenge__pack_to_buffer
                     (const Challenge   *message,
                      ProtobufCBuffer     *buffer);
Challenge *
       challenge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   challenge__free_unpacked
                     (Challenge *message,
                      ProtobufCAllocator *allocator);
/* Commitment methods */
void   commitment__init
                     (Commitment         *message);
size_t commitment__get_packed_size
                     (const Commitment   *message);
size_t commitment__pack
                     (const Commitment   *message,
                      uint8_t             *out);
size_t commitment__pack_to_buffer
                     (const Commitment   *message,
                      ProtobufCBuffer     *buffer);
Commitment *
       commitment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   commitment__free_unpacked
                     (Commitment *message,
                      ProtobufCAllocator *allocator);
/* OverlayMessage methods */
void   overlay_message__init
                     (OverlayMessage         *message);
size_t overlay_message__get_packed_size
                     (const OverlayMessage   *message);
size_t overlay_message__pack
                     (const OverlayMessage   *message,
                      uint8_t             *out);
size_t overlay_message__pack_to_buffer
                     (const OverlayMessage   *message,
                      ProtobufCBuffer     *buffer);
OverlayMessage *
       overlay_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   overlay_message__free_unpacked
                     (OverlayMessage *message,
                      ProtobufCAllocator *allocator);
/* ProtocolPacket methods */
void   protocol_packet__init
                     (ProtocolPacket         *message);
size_t protocol_packet__get_packed_size
                     (const ProtocolPacket   *message);
size_t protocol_packet__pack
                     (const ProtocolPacket   *message,
                      uint8_t             *out);
size_t protocol_packet__pack_to_buffer
                     (const ProtocolPacket   *message,
                      ProtobufCBuffer     *buffer);
ProtocolPacket *
       protocol_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol_packet__free_unpacked
                     (ProtocolPacket *message,
                      ProtobufCAllocator *allocator);
/* RequestRoster methods */
void   request_roster__init
                     (RequestRoster         *message);
size_t request_roster__get_packed_size
                     (const RequestRoster   *message);
size_t request_roster__pack
                     (const RequestRoster   *message,
                      uint8_t             *out);
size_t request_roster__pack_to_buffer
                     (const RequestRoster   *message,
                      ProtobufCBuffer     *buffer);
RequestRoster *
       request_roster__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request_roster__free_unpacked
                     (RequestRoster *message,
                      ProtobufCAllocator *allocator);
/* RequestTree methods */
void   request_tree__init
                     (RequestTree         *message);
size_t request_tree__get_packed_size
                     (const RequestTree   *message);
size_t request_tree__pack
                     (const RequestTree   *message,
                      uint8_t             *out);
size_t request_tree__pack_to_buffer
                     (const RequestTree   *message,
                      ProtobufCBuffer     *buffer);
RequestTree *
       request_tree__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request_tree__free_unpacked
                     (RequestTree *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* Roster methods */
void   roster__init
                     (Roster         *message);
size_t roster__get_packed_size
                     (const Roster   *message);
size_t roster__pack
                     (const Roster   *message,
                      uint8_t             *out);
size_t roster__pack_to_buffer
                     (const Roster   *message,
                      ProtobufCBuffer     *buffer);
Roster *
       roster__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roster__free_unpacked
                     (Roster *message,
                      ProtobufCAllocator *allocator);
/* ServerIdentity methods */
void   server_identity__init
                     (ServerIdentity         *message);
size_t server_identity__get_packed_size
                     (const ServerIdentity   *message);
size_t server_identity__pack
                     (const ServerIdentity   *message,
                      uint8_t             *out);
size_t server_identity__pack_to_buffer
                     (const ServerIdentity   *message,
                      ProtobufCBuffer     *buffer);
ServerIdentity *
       server_identity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_identity__free_unpacked
                     (ServerIdentity *message,
                      ProtobufCAllocator *allocator);
/* Token methods */
void   token__init
                     (Token         *message);
size_t token__get_packed_size
                     (const Token   *message);
size_t token__pack
                     (const Token   *message,
                      uint8_t             *out);
size_t token__pack_to_buffer
                     (const Token   *message,
                      ProtobufCBuffer     *buffer);
Token *
       token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   token__free_unpacked
                     (Token *message,
                      ProtobufCAllocator *allocator);
/* TreeMarshal methods */
void   tree_marshal__init
                     (TreeMarshal         *message);
size_t tree_marshal__get_packed_size
                     (const TreeMarshal   *message);
size_t tree_marshal__pack
                     (const TreeMarshal   *message,
                      uint8_t             *out);
size_t tree_marshal__pack_to_buffer
                     (const TreeMarshal   *message,
                      ProtobufCBuffer     *buffer);
TreeMarshal *
       tree_marshal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tree_marshal__free_unpacked
                     (TreeMarshal *message,
                      ProtobufCAllocator *allocator);
/* TreeNodeInfo methods */
void   tree_node_info__init
                     (TreeNodeInfo         *message);
size_t tree_node_info__get_packed_size
                     (const TreeNodeInfo   *message);
size_t tree_node_info__pack
                     (const TreeNodeInfo   *message,
                      uint8_t             *out);
size_t tree_node_info__pack_to_buffer
                     (const TreeNodeInfo   *message,
                      ProtobufCBuffer     *buffer);
TreeNodeInfo *
       tree_node_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tree_node_info__free_unpacked
                     (TreeNodeInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Announcement_Closure)
                 (const Announcement *message,
                  void *closure_data);
typedef void (*Challenge_Closure)
                 (const Challenge *message,
                  void *closure_data);
typedef void (*Commitment_Closure)
                 (const Commitment *message,
                  void *closure_data);
typedef void (*OverlayMessage_Closure)
                 (const OverlayMessage *message,
                  void *closure_data);
typedef void (*ProtocolPacket_Closure)
                 (const ProtocolPacket *message,
                  void *closure_data);
typedef void (*RequestRoster_Closure)
                 (const RequestRoster *message,
                  void *closure_data);
typedef void (*RequestTree_Closure)
                 (const RequestTree *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*Roster_Closure)
                 (const Roster *message,
                  void *closure_data);
typedef void (*ServerIdentity_Closure)
                 (const ServerIdentity *message,
                  void *closure_data);
typedef void (*Token_Closure)
                 (const Token *message,
                  void *closure_data);
typedef void (*TreeMarshal_Closure)
                 (const TreeMarshal *message,
                  void *closure_data);
typedef void (*TreeNodeInfo_Closure)
                 (const TreeNodeInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor announcement__descriptor;
extern const ProtobufCMessageDescriptor challenge__descriptor;
extern const ProtobufCMessageDescriptor commitment__descriptor;
extern const ProtobufCMessageDescriptor overlay_message__descriptor;
extern const ProtobufCMessageDescriptor protocol_packet__descriptor;
extern const ProtobufCMessageDescriptor request_roster__descriptor;
extern const ProtobufCMessageDescriptor request_tree__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor roster__descriptor;
extern const ProtobufCMessageDescriptor server_identity__descriptor;
extern const ProtobufCMessageDescriptor token__descriptor;
extern const ProtobufCMessageDescriptor tree_marshal__descriptor;
extern const ProtobufCMessageDescriptor tree_node_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosi_2eproto__INCLUDED */
